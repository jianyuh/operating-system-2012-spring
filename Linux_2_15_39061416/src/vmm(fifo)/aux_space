#include <stdio.h>
#include <stdlib.h>
#include<sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <linux/stat.h>
#include <math.h>
#include <time.h>
#include "vmm_global.h"

void init()
{
	int i,j,n;
	srand(time(NULL));
	time_n=0;
	exec_times=0;
	for(n=0;n<OUTER_PAGE_TOTAL;n++)
	{
		outerpagetable[n].page_num=n;
		outerpagetable[n].index_num=n*INNER_PAGE_TABLE_SIZE;

		for(i=n*PAGE_SIZE;i<(n+1)*PAGE_SIZE&&i<PAGE_TOTAL;i++)
		{
			pagetable[i].page_num=i;
			pagetable[i].filled=FALSE;
			pagetable[i].changed=FALSE;
			pagetable[i].count=0;

			//set the protect type with the random number
			switch (rand()%7)
			{
			case 0:
				pagetable[i].pro_type=READABLE;
				break;
			case 1:
				pagetable[i].pro_type=WRITABLE;
				break;
			case 2:
				pagetable[i].pro_type=EXECUTABLE;
				break;
			case 3:
				pagetable[i].pro_type=READABLE|WRITABLE;
				break;
			case 4:
				pagetable[i].pro_type=READABLE|EXECUTABLE;
				break;
			case 5:
				pagetable[i].pro_type=WRITABLE|EXECUTABLE;
				break;
			case 6:
				pagetable[i].pro_type=READABLE|WRITABLE|EXECUTABLE;
				break;
			default:
				break;
			}
			pagetable[i].virtual_address=i*PAGE_SIZE*2;//the disk address mapping the page table	
		}
	}
	for (j=0;j<BLOCK_TOTAL;j++)
	{
		//select some physical blocks to move the page from the disk to the actual memory randomly
		if(rand()%2==0)
		{
			do_page_in(&pagetable[j],j);
			pagetable[j].block_num=j;
			pagetable[j].filled=TRUE;
			block_status[j]=TRUE;
			Time[time_n++]=pagetable[j].page_num;
		}
		else
			block_status[j]=FALSE;
	}

	//set process id and related page table number
	pcb[0].pid=1;
	pcb[0].begin=0;
	pcb[0].end=7;
	pcb[1].pid=2;
	pcb[1].begin=8;
	pcb[1].end=15;
}

void do_response()
{
	PageTablePtr ptable;
	unsigned int outer_page_num,in_page_offset,offset,in_page_num,actual_address,i;

	//whether over boundary
	if(mem_request->virtual_address<0||mem_request->virtual_address>VIRTUAL_MEMORY_SIZE)
	{
		handle_error(OVER_BOUNDARY);
		return;
	}

	outer_page_num=(mem_request->virtual_address/PAGE_SIZE)/INNER_PAGE_TABLE_SIZE;
	in_page_offset=(mem_request->virtual_address/PAGE_SIZE)%INNER_PAGE_TABLE_SIZE;
	offset=mem_request->virtual_address%PAGE_SIZE;

	for(i=0;i<PID_NUM;++i)
	{
		if(outer_page_num>=pcb[i].begin && outer_page_num<=pcb[i].end)
		{
			work_id=pcb[i].pid;
		}
	}

	//actually, in_page_num == page num == (mem_request->virtual_address/PAGE_SIZE)
	in_page_num=outerpagetable[outer_page_num].index_num+in_page_offset;
	printf("The work id: %u\tThe page number:%u\tThe offset:%u\n",work_id,in_page_num,offset);

	ptable=&pagetable[in_page_num];

	//whether to produce the page fault according to the related flag
	if(!ptable->filled)
	{
		do_page_fault(ptable);
	}

	ptable->no_use=exec_times++;				//for the LRU algorithom:page exchange
	actual_address=ptable->block_num*PAGE_SIZE+offset;
	printf("The actual address is: %u\n",actual_address);

	//check the page access rights and deal with memory access request
	switch (mem_request->request_type)
	{
	case READ:
		{
			ptable->count++;
			if(!(ptable->pro_type&READABLE))	//can not be read
			{
				handle_error(READ_DENY);
				return;
			}
			//read from the actual memory
			printf("Success to read: The value is %02X\n",actual_memory[actual_address]);
			break;
		}
	case WRITE:
		{
			ptable->count++;
			if(!(ptable->pro_type&WRITABLE))	// can not be written
			{
				handle_error(WRITE_DENY);	
				return;
			}
			//write the requested data to the actual memory
			actual_memory[actual_address]=mem_request->value;
			ptable->changed=TRUE;			
			printf("Success to write!\n");
			break;
		}
	case EXECUTE:	
		{
			ptable->count++;
			if(!(ptable->pro_type&EXECUTABLE))	//can not be executed
			{
				handle_error(EXECUTE_DENY);
				return;
			}			
			printf("Success to execute!\n");
			break;
		}
	default:									//illegal memory access request
		{	
			handle_error(INVALID_REQUEST);
			return;
		}
	}
}

//deal with the page fault
void do_page_fault(PageTablePtr ptable)
{
	unsigned int i;
	char c;
	for(i=0;i<BLOCK_TOTAL;i++)
	{
		if(!block_status[i])
		{
			//read from the disk, and write to the actual memory
			do_page_in(ptable, i);

			//refresh the page table
			ptable->block_num = i;
			ptable->filled = TRUE;
			ptable->changed = FALSE;
			ptable->count = 0;

			block_status[i] = TRUE;
			return;
		}
	}

	//no free physical block, do page exchange
	printf("Please choose a method to do the page out algorithm,and press '1' for FIFO, '2' for LFU, '3' for LRU...\n");
	while(c=getchar())
	{
		if(c=='1')
		{
			do_FIFO(ptable);
			break;
		}
		else if(c=='2')
		{
			do_LFU(ptable);
			break;
		}
		else if(c=='3')
		{
			do_LRU(ptable);
			break;
		}
	}
}

//page change:Least Frequency Use
void do_LFU(PageTablePtr ptable)
{
	unsigned int i,min_use,page;
	printf("There is no idle block.Do LFU:\n ");
	min_use=0xFFFFFFFF;							//init the least frequency
	page=0;
	for(i=0;i<PAGE_TOTAL;i++)
	{
		if(pagetable[i].count<min_use)
		{
			min_use=pagetable[i].count;
			page=pagetable[i].page_num;
		}
	}
	printf("Replace the %uth page./n",page);
	if(pagetable[page].changed)
	{
		//there are some changes, which need to write back to the disk
		printf("The page to be replaced has been changed:Write back.\n");
		do_page_out(&pagetable[page]);
	}
	pagetable[page].changed=FALSE;
	pagetable[page].count=0;
	pagetable[page].filled=FALSE;


	do_page_in(ptable,pagetable[page].block_num);

	//refresh the page table
	ptable->block_num=pagetable[page].block_num;
	ptable->changed=FALSE;
	ptable->count=0;
	ptable->filled=TRUE;

	printf("Page exchange Success!\n");
}

//page change:Fisrt in, First out
void do_FIFO(PageTablePtr ptable)
{
	unsigned int firstcome;

	//Time[PAGE_TOTAL]  ---->>>> the page fifo of the actual memory, each is page number and the first is the first do_page_in page. 
	firstcome=Time[0];
	printf("There is no idle block.Do FIFO:\n ");
	printf("Replace the %uth page./n",firstcome);
	if(pagetable[firstcome].changed)
	{
		printf("The page to be replaced has been changed:Write back.\n");
		do_page_out(&pagetable[firstcome]);
	}
	pagetable[firstcome].changed=FALSE;
	pagetable[firstcome].count=0;
	pagetable[firstcome].filled=FALSE;

	do_page_in(ptable,pagetable[firstcome].block_num);


	ptable->block_num=pagetable[firstcome].block_num;
	ptable->changed=FALSE;
	ptable->count=0;
	ptable->filled=TRUE;

	time_change(ptable->page_num);

	printf("Page exchange Success!\n");
}

//page change:LRU
void do_LRU(PageTablePtr ptable)
{
	unsigned int i,min_use,page;
	printf("There is no idle block.Do LRU:\n ");
	min_use=0xFFFFFFFF;							//init the least frequency
	page=0;
	for(i=0;i<PAGE_TOTAL;i++)
	{
		if(min_use>pagetable[i].no_use)
		{
			min_use=pagetable[i].no_use;
			page=pagetable[i].page_num;
		}
	}
	printf("Replace the %uth page./n",page);
	if(pagetable[page].changed)
	{
		printf("The page to be replaced has been changed:Write back.\n");
		do_page_out(&pagetable[page]);
	}
	pagetable[page].changed=FALSE;
	pagetable[page].count=0;
	pagetable[page].no_use=0;
	pagetable[page].filled=FALSE;

	do_page_in(ptable,pagetable[page].block_num);

	ptable->block_num=pagetable[page].block_num;
	ptable->changed=FALSE;
	ptable->count=0;
	ptable->no_use=0;
	ptable->filled=TRUE;
	printf("Page exchange Success!\n");

}

//move the contents in the disk into the actual memory
void do_page_in(PageTablePtr ptable,unsigned int block_num)
{
	unsigned int read_num;
	if(fseek(auxmem_ptr,ptable->virtual_address,SEEK_SET)<0)
	{
#ifdef DEBUG
		printf("DEBUG:auxAddr=%u\tftell=%u\n",ptable->virtual_address,ftell(auxmem_ptr));
#endif
		handle_error(FILE_SEEK_FAILED);
		exit(1);
	}
	if((read_num=fread(&actual_memory[block_num*PAGE_SIZE],sizeof(unsigned char),PAGE_SIZE,auxmem_ptr))<PAGE_SIZE)
	{
#ifdef DEBUG
		printf("DEBUG:auxAddr=%u\tftell=%u\n",ptable->virtual_address,ftell(auxmem_ptr));
		printf("DEBUG:blockNum=%u\treadNum=%u\n",block_num,read_num);
		printf("DEBUG:feof= %d\tferror=%d\n",feof(auxmem_ptr),ferror(auxmem_ptr));
#endif
		handle_error(FILE_READ_FAILED);
		exit(1);
	}
	printf("Read page success: auxiliary memory address %u -->> actual block %u\n",ptable->virtual_address,block_num);
}

//move the contents in the actual memory out to the disk
void do_page_out(PageTablePtr ptable)
{
	unsigned int write_num;
	if(fseek(auxmem_ptr,ptable->virtual_address,SEEK_SET)<0)
	{
#ifdef DEBUG
		printf("DEBUG:auxAddr=%u\tftell=%u\n",ptable->virtual_address,ftell(auxmem_ptr));
#endif
		handle_error(FILE_SEEK_FAILED);
		exit(1);
	}
	if((write_num=fwrite(&actual_memory[ptable->block_num*PAGE_SIZE],sizeof(unsigned char),PAGE_SIZE,auxmem_ptr))<PAGE_SIZE)
	{
#ifdef DEBUG
		printf("DEBUG:auxAddr=%u\tftell=%u\n",ptable->virtual_address,ftell(auxmem_ptr));
		printf("DEBUG:readNum=%u\n",write_num);
		printf("DEBUG:feof= %d\tferror=%d\n",feof(auxmem_ptr),ferror(auxmem_ptr));
#endif
		handle_error(FILE_WRITE_FAILED);
		exit(1);
	}
	printf("Write back success: actual block %u -->> auxiliary address %03X\n",ptable->virtual_address,ptable->block_num);
}

void time_change(unsigned int num)
{
	int i;
	for(i=0;i<time_n-1;++i)
		Time[i]=Time[i+1];
	Time[time_n]=num;
}

void handle_error(ErrorType error_type)
{
	switch (error_type)
	{
	case READ_DENY:
		printf("Access error: the address can not be read!\n");
		break;
	case WRITE_DENY:
		printf("Access error: the address can not be written!\n");
		break;
	case EXECUTE_DENY:
		printf("Access error: the address can not be executed!\n");
		break;
	case INVALID_REQUEST:
		printf("Access error: illegal request!\n");
		break;
	case OVER_BOUNDARY:
		printf("Access error: the address is over boundary!\n");
		break;
	case FILE_OPEN_FAILED:
		printf("System error: fail to open the file!\n");
		break;
	case FILE_CLOSE_FAILED:
		printf("System error: fail to close the file!\n");
		break;
	case FILE_SEEK_FAILED:
		printf("System error: fail to seek the file!\n");
		break;
	case FILE_READ_FAILED:
		printf("System error: fail to read the file!\n");
		break;
	case FILE_WRITE_FAILED:
		printf("System error: fail to write the file!\n");
		break;
	default:
		printf("Unknown error: no such error code!\n");
		break;
	}
}

//print the page table information
void print_pageinfo()
{
	unsigned int i,j,m;
	unsigned char str[4];
	printf("outerNO\tinnerNO\tblockNO\tFilled\tChanged\tPro\tCnt\tAux mem\n");
	for(i=0;i<OUTER_PAGE_TOTAL;++i)
	{
		for(j=0;j<INNER_PAGE_TABLE_SIZE;++j)
		{
			m=outerpagetable[i].index_num+j;
			printf("\t%u\t\t%u\t%u\t%u\t%u\t%s\t%u\t%u\n", i, pagetable[m].page_num,pagetable[m].block_num, pagetable[m].filled, 
				pagetable[m].changed, get_protype_str(str, pagetable[m].pro_type), 
				pagetable[m].count, pagetable[m].virtual_address);
		}
	}
}

//get the protect type string
char *get_protype_str(char *str,unsigned char type)
{
	if (type & READABLE)
		str[0] = 'r';
	else
		str[0] = '-';
	if (type & WRITABLE)
		str[1] = 'w';
	else
		str[1] = '-';
	if (type & EXECUTABLE)
		str[2] = 'x';
	else
		str[2] = '-';
	str[3] = '\0';
	return str;
}



int main()
{
	char c;
	int i,read_num=0;
	FILE *fp;

	if(!(auxmem_ptr=fopen("auxiliary_space","rw+")))
	{
		handle_error(FILE_OPEN_FAILED);
		exit(1);
	}

	init();
	print_pageinfo();
	mem_request=(MemoryAccessRequestPtr)malloc(sizeof(MemoryAccessRequest));
	umask(0);									//file mask
	//mkfifo(FIFO,S_IFIFO|0666);				//open fifo and read data
	fp=fopen(FIFO,"r");				//open FIFO

	//simulate the memory access request and response
	while(TRUE)
	{
		//do_request();

		if((read_num=fread(mem_request,sizeof(MemoryAccessRequest),1,fp))==0)
		{
			printf("Please produce memory access request...");
			printf("(Press 'C' to cancel, Press others to continue...)\n");
			if((c=getchar())=='c'||c=='C')
				break;
			else
				continue;
		}

		do_response();
		printf("Press 'P' to print the page-table...\n");
		if((c=getchar())=='p'||c=='P')
			print_pageinfo();
		while(c!='\n')
			c=getchar();
		printf("Press 'C' to cancel, Press others to continue...\n");
		if((c=getchar())=='c'||c=='C')
			break;
		while(c!='\n')
			c=getchar();
	}

	fclose(fp);
	if(fclose(auxmem_ptr)==EOF)
	{
		handle_error(FILE_CLOSE_FAILED);
		exit(1);
	}
	return 0;
}
